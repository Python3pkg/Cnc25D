==============================
Cnc25D API Outline Utilization
==============================

After getting a *Cnc25D format B outline* from the cnc_cut_outline() function, you probably want to use this outline in CAD_ tools. The function *cnc25d_api.outline_arc_line()* lets you transform the *Cnc25D format B outline* into one of this four formats: *freecad*, *svgwrite*, *dxfwrite*, *tkinter*.

.. _CAD : https://en.wikipedia.org/wiki/Comparison_of_CAD_editors_for_AEC

::

  cnc25d_api.outline_arc_line(outline_B, backend)
  cnc25d_api.outline_circle((center-x, center-y), radius, backend)

  with backend=['freecad', 'svgwrite', 'dxfwrite', 'tkinter']


freecad
-------

*outline_arc_line(outline_B, 'freecad')* returns *FreeCAD Part.Shape* object that can be used easily in the classic *FreeCAD* workflow::

  my_part_shape = cnc25d_api.outline_arc_line(my_outline_B, 'freecad')
  my_part_face = Part.Face(Part.Wire(my_part_shape.Edges))
  my_part_solid = my_part_face.extrude(Base.Vector(0,0,20))

Notice that *FreeCAD* conserve the *arc* geometrical entity during its complete workflow. So after extruding the outline, slicing the part and then projecting it again in a DXF file, you still get the *arcs* you have designed in your original outline.

The combination *outline_arc_line(cnc_cut_outline(), 'freecad')* is often used. So the *Cnc25D API* proposes this combination with the function *cnc25d_api.cnc_cut_outline_fc()*.

With this methodolgy you can create and extrude any outline made out of lines and arcs. But creating a *circle* outline is not directly possible. You need to create two consecutive arcs, which is not very convenient. If you want to create a circle (to extrude it into a cylinder), you can use the function *cnc25d_api.outline_circle((center-x, center-y), radius, 'freecad')*.

svgwrite
--------

A *Cnc25D format B outline* is a 2D vectorial shape that can be transposed in a SVG_ file. *SVG file* is one of the usual input format for the 3-axis CNC tool chain. This snippet let you dump the *Cnc25D format B outline* in a *SVG* file::

  import svgwrite
  my_outline_B = [ .. ]
  object_svg = svgwrite.Drawing(filename = "my_ouline.svg")
  svg_outline = cnc25d_api.outline_arc_line(my_outline_B, 'svgwrite')
  for one_line_or_arc in svg_outline:
    object_svg.add(one_line_or_arc)
  #one_svg_circle = cnc25d_api.outline_circle((100,100), 40, 'svgwrite') # create a circle
  #object_svg.add(one_svg_circle)
  object_svg.save()

*Cnc25D* relies on the *Python package* svgwrite_ from **mozman**. Use Inkscape_ to review the generated *SVG* file.

.. _svgwrite : http://pythonhosted.org/svgwrite/
.. _Inkscape : http://inkscape.org/

**Warning:** The SVG_ format supports the *arc* graphical object but the Python package svgwrite_ has not implemented yet the *arc* constructor. So *Cnc25D* transform each *arc* of the outline into a series of small segments. This might be an issue for certain *CNC tool chain* or for some designs.

dxfwrite
--------

A *Cnc25D format B outline* is a 2D vectorial shape that can be transposed in a DXF_ file::

  import dxfwrite
  my_outline_B = [ .. ]
  object_dxf = DXFEngine.drawing("my_outline.dxf")
  #object_dxf.add_layer("my_dxf_layer")
  dxf_outline = cnc25d_api.outline_arc_line(my_outline_B, 'dxfwrite')
  for one_line_or_arc in dxf_outline:
    object_dxf.add(one_line_or_arc)
  #one_dxf_circle = cnc25d_api.outline_circle((100,100), 40, 'dxfwrite') # create a circle
  #object_dxf.add(one_dxf_circle)
  object_dxf.save()

*Cnc25D* relies on the *Python package* dxfwrite_ from **mozman**. Use LibreCAD_ to review the generated *DXF* file.

.. _dxfwrite : http://pythonhosted.org/svgwrite/
.. _LibreCAD : http://librecad.org

**Warning:** Like previously, the DXF_ format supports the *arc* graphical object but the Python package dxfwrite_ has not implemented yet the *arc* constructor. So *Cnc25D* transform each *arc* of the outline into a series of small segments. This might be an issue for certain *CNC tool chain* or for some designs.

tkinter
-------

During the early phase of the design, you just need to view the outline (that still might be under-construction) without using the powerful *FreeCAD* or dumping files. This is the purpose of the *Tkinter GUI*. Check the design example *cnc25d_api_example.py* generated by the binary *cnc25d_example_generator.py* or check the file *cnc25d/tests/cnc25d_api_macro.py* to see how to implement this small *graphic user interface*.

.. _DXF : http://en.wikipedia.org/wiki/AutoCAD_DXF
.. _SVG : http://www.w3.org/Graphics/SVG/

